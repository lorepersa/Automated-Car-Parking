/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var message_on = true
				lateinit var support : itunibo.automatedcarparking.fan.FanSupport
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[fan] | [State] init | Entry point.")
						 support = itunibo.automatedcarparking.fan.FanSupport(myself)  
						println("[fan] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("[fan] | [State] wait | Entry point.")
						println("[fan] | [State] wait | Exit point.")
					}
					 transition(edgeName="t00",targetState="turnOnFan",cond=whenRequest("fan_on"))
					transition(edgeName="t01",targetState="turnOffFan",cond=whenRequest("fan_off"))
				}	 
				state("turnOnFan") { //this:State
					action { //it:State
						println("[fan] | [State] turnOnFan | Entry point.")
						 message_on = true  
						 support.turnOn()  
						println("[fan] | [State] turnOnFan | Exit point.")
					}
					 transition(edgeName="t12",targetState="handleCommand",cond=whenDispatch("auto_fan_done"))
					transition(edgeName="t13",targetState="handleCommand",cond=whenDispatch("auto_fan_fail"))
				}	 
				state("turnOffFan") { //this:State
					action { //it:State
						println("[fan] | [State] turnOffFan | Entry point.")
						 message_on = false  
						 support.turnOff()  
						println("[fan] | [State] turnOffFan | Exit point.")
					}
					 transition(edgeName="t24",targetState="handleCommand",cond=whenDispatch("auto_fan_done"))
					transition(edgeName="t25",targetState="handleCommand",cond=whenDispatch("auto_fan_fail"))
				}	 
				state("handleCommand") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("auto_fan_done(X)"), Term.createTerm("auto_fan_done(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  message_on  
								 ){answer("fan_on", "fan_done", "fan_done(X)"   )  
								}
								else
								 {answer("fan_off", "fan_done", "fan_done(X)"   )  
								 }
						}
						if( checkMsgContent( Term.createTerm("auto_fan_fail(REASON)"), Term.createTerm("auto_fan_fail(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val REASON = payloadArg(0)  
								if(  message_on  
								 ){answer("fan_on", "fan_fail", "fan_fail($REASON)"   )  
								}
								else
								 {answer("fan_off", "fan_fail", "fan_fail($REASON)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
