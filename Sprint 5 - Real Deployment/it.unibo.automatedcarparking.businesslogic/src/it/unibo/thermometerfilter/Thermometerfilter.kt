/* Generated by AN DISI Unibo */ 
package it.unibo.thermometerfilter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Thermometerfilter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var TMAX : Int = 0
				
				val resource = itunibo.qakobserver.FactoryQakResource.create(myself)
				
				val thermometerObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "thermometer", itunibo.automatedcarparking.parkingarea.ParkingAreaTemperatureAutoMessage)
				
				val parkingAreaRolodex = itunibo.automatedcarparking.rolodex.ParkingAreaRolodex
				
				val status = itunibo.automatedcarparking.parkingarea.TemperatureStatus(false)
				val gson = com.google.gson.Gson()
				
				fun getJsonStatus() : String {
					return gson.toJson(status) 
				}
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 thermometerObserver.observe()  
						 val config = itunibo.automatedcarparking.configuration.TemperatureConfigurationReader.read(parkingAreaRolodex.filenameTemperatureConfiguration)  
						 TMAX = config.TMAX  
						 resource.notify(getJsonStatus())  
					}
					 transition( edgeName="goto",targetState="loop", cond=doswitch() )
				}	 
				state("loop") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("auto_parking_area_temperature(T)"), Term.createTerm("auto_parking_area_temperature(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val T = payloadArg(0).toInt()  
								 var update_status = false  
								if(  T > TMAX && !status.high  
								 ){ status.high = true  
								 update_status = true  
								}
								if(  T <= TMAX && status.high  
								 ){ status.high = false  
								 update_status = true  
								}
								if(  update_status  
								 ){ resource.notify(getJsonStatus())  
								}
						}
					}
					 transition(edgeName="t029",targetState="loop",cond=whenDispatch("auto_parking_area_temperature"))
				}	 
			}
		}
}
