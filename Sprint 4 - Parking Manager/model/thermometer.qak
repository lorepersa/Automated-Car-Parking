/*
 * ==================================
 * ================================== | ROUTINE THERMOMETER MEASURE TEMPERATURE
 * ==================================
 * thermometer                        | received input_temperature(T)
 *                                    | update observers with new temperature T
 * 
 */
System systemthermometer

Dispatch  input_temperature  : input_temperature(T)

Context ctxthermometer        ip [host="localhost" port=8062] 


QActor thermometer context ctxthermometer {
	
	[# 
		data class Temperature(var temperature: Int) {}
		
		val gson = com.google.gson.Gson()
		val resource = itunibo.qakobserver.FactoryQakResource.create(myself)
		
		fun getJsonTemperature(temperature : Int) : String {
			return gson.toJson(Temperature(temperature))
		}
	#]

	State init initial {
		println("[thermometer] | [State] init | Entry point.")
		
		[# resource.notify(getJsonTemperature(25)) #]

            // TODO need to configure virtual or real mode...
		
		println("[thermometer] | [State] init | Exit point.")
	} Goto wait
	
	State wait {
		println("[thermometer] | [State] wait | Entry point.")
		println("[thermometer] | [State] wait | Exit point.")
	} Transition t0
	whenMsg     input_temperature -> updateTemperature
	
	State updateTemperature {
		println("[thermometer] | [State] updateTemperature | Entry point.")
		onMsg(input_temperature : input_temperature(T)) {
			[# var T = payloadArg(0).toInt() #]
			println("[thermometer] | [State] updateTemperature | Temperature: $T °C.")
			[# resource.notify(getJsonTemperature(T)) #]
		} // end onMsg
		
		println("[thermometer] | [State] updateTemperature | Exit point.")
	} Goto wait
}