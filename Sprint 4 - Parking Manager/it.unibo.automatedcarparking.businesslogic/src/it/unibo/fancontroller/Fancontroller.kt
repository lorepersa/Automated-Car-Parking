/* Generated by AN DISI Unibo */ 
package it.unibo.fancontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fancontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var send_on = false
				var send_command = false
				
				val resource = itunibo.qakobserver.FactoryQakResource.create(myself)
				
				val thermometerfilterObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "thermometerfilter", itunibo.automatedcarparking.parkingarea.ParkingAreaTemperatureLevelAutoMessage)
				
				val status = itunibo.automatedcarparking.parkingarea.FanControllerStatus(false, false, "X")
				val gson = com.google.gson.Gson()
				
				fun getJsonStatus() : String {
					return gson.toJson(status) 
				}
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 resource.notify(getJsonStatus())  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t030",targetState="handleCommand",cond=whenDispatch("manager_fan_on"))
					transition(edgeName="t031",targetState="handleCommand",cond=whenDispatch("manager_fan_off"))
					transition(edgeName="t032",targetState="handleMode",cond=whenDispatch("manager_fan_manual_mode"))
					transition(edgeName="t033",targetState="handleMode",cond=whenDispatch("manager_fan_automatic_mode"))
					transition(edgeName="t034",targetState="handleCommand",cond=whenDispatch("auto_parking_area_temperature_level"))
				}	 
				state("handleCommand") { //this:State
					action { //it:State
						if(  status.automatic  
						 ){if( checkMsgContent( Term.createTerm("auto_parking_area_temperature_level(LEVEL)"), Term.createTerm("auto_parking_area_temperature_level(LEVEL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val HIGH = payloadArg(0).toBoolean()  
								if(  status.on && !HIGH  
								 ){ send_command = true  
								 send_on = false  
								}
								if(  !status.on && HIGH  
								 ){ send_command = true  
								 send_on = true  
								}
						}
						}
						else
						 {if( checkMsgContent( Term.createTerm("manager_fan_on(X)"), Term.createTerm("manager_fan_on(X)"), 
						                         currentMsg.msgContent()) ) { //set msgArgList
						 		 send_command = true  
						 		 send_on = true  
						 }
						 if( checkMsgContent( Term.createTerm("manager_fan_off(X)"), Term.createTerm("manager_fan_off(X)"), 
						                         currentMsg.msgContent()) ) { //set msgArgList
						 		 send_command = true  
						 		 send_on = false  
						 }
						 }
					}
					 transition( edgeName="goto",targetState="sendFanCommand", cond=doswitchGuarded({ send_command  
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( send_command  
					) }) )
				}	 
				state("handleMode") { //this:State
					action { //it:State
						 var update_status = false  
						if(  status.automatic  
						 ){if( checkMsgContent( Term.createTerm("manager_fan_manual_mode(X)"), Term.createTerm("manager_fan_manual_mode(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 status.automatic = false  
								 update_status = true  
								 thermometerfilterObserver.cancel()  
						}
						}
						else
						 {if( checkMsgContent( Term.createTerm("manager_fan_automatic_mode(X)"), Term.createTerm("manager_fan_automatic_mode(X)"), 
						                         currentMsg.msgContent()) ) { //set msgArgList
						 		 status.automatic = true  
						 		 update_status = true  
						 		 thermometerfilterObserver.observe()  
						 }
						 }
						if(  update_status  
						 ){ resource.notify(getJsonStatus())  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("sendFanCommand") { //this:State
					action { //it:State
						 send_command = false  
						if(  send_on  
						 ){request("fan_on", "fan_on(X)" ,"fan" )  
						}
						else
						 {request("fan_off", "fan_off(X)" ,"fan" )  
						 }
					}
					 transition(edgeName="t135",targetState="handleFanReply",cond=whenReply("fan_done"))
					transition(edgeName="t136",targetState="handleFanReply",cond=whenReply("fan_fail"))
				}	 
				state("handleFanReply") { //this:State
					action { //it:State
						 var update_status = false  
						if( checkMsgContent( Term.createTerm("fan_done(X)"), Term.createTerm("fan_done(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  send_on && !status.on  
								 ){ update_status = true  
								 status.on = true  
								 status.failureReason = "X"  
								}
								if(  !send_on && status.on  
								 ){ update_status = true  
								 status.on = false  
								 status.failureReason = "X"  
								}
						}
						if( checkMsgContent( Term.createTerm("fan_fail(REASON)"), Term.createTerm("fan_fail(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val REASON = payloadArg(0)  
								 status.failureReason = REASON  
								 update_status = true  
						}
						if(  update_status  
						 ){ resource.notify(getJsonStatus())  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
