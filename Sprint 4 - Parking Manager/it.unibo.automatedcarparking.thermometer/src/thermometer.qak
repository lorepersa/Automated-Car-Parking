System systemthermometer

Dispatch  input_temperature  : input_temperature(T)

Context ctxthermometer        ip [host="localhost" port=8062] 


QActor thermometer context ctxthermometer {
	
	[# 
		val gson = com.google.gson.Gson()
		val resource = itunibo.qakobserver.FactoryQakResource.create(myself)
		
		lateinit var support : itunibo.automatedcarparking.thermometer.ThermometerSupport
		
		fun getJsonTemperature(temperature : Int) : String {
			return gson.toJson(itunibo.automatedcarparking.thermometer.Temperature(temperature))
		}
	#]

	State init initial {
		println("[thermometer] | [State] init | Entry point.")
		
		[# resource.notify(getJsonTemperature(25)) #]
		
		[# support = itunibo.automatedcarparking.thermometer.ThermometerSupport(myself) #]
		
		println("[thermometer] | [State] init | Exit point.")
	} Goto wait
	
	State wait {
		println("[thermometer] | [State] wait | Entry point.")
		println("[thermometer] | [State] wait | Exit point.")
	} Transition t0
	whenMsg     input_temperature -> updateTemperature
	
	State updateTemperature {
		println("[thermometer] | [State] updateTemperature | Entry point.")
		onMsg(input_temperature : input_temperature(T)) {
			[# var T = payloadArg(0).toInt() #]
			println("[thermometer] | [State] updateTemperature | Temperature: $T °C.")
			[# resource.notify(getJsonTemperature(T)) #]
		} // end onMsg
		
		println("[thermometer] | [State] updateTemperature | Exit point.")
	} Goto wait
}