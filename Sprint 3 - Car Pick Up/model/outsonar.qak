/*
 * ==================================
 * ================================== | ROUTINE OUTSONAR MEASURE DISTANCE
 * ==================================
 * outsonar                           | received input_distance(D)
 *                                    | update observers with new distance D
 * 
 */
System systemoutsonar

Dispatch  input_distance  : input_distance(D)

Context ctxoutsonar        ip [host="localhost" port=8061] 


QActor outsonar context ctxoutsonar {
	
	[# 
		data class Distance(var distance: Int) {}
		
		val gson = com.google.gson.Gson()
		val resource = itunibo.qakobserver.FactoryQakResource.create(myself)
		
		fun getJsonDistance(distance : Int) : String {
			return gson.toJson(Distance(distance))
		}
	#]

	State init initial {
		println("[outsonar] | [State] init | Entry point.")
		
		[# resource.notify(getJsonDistance(0)) #]
		
		// TODO need to configure virtual or real mode...
		
		println("[outsonar] | [State] init | Exit point.")
	} Goto wait
	
	State wait {
		println("[outsonar] | [State] wait | Entry point.")
		println("[outsonar] | [State] wait | Exit point.")
	} Transition t0
	whenMsg     input_distance -> updateDistance
	
	State updateDistance {
		println("[outsonar] | [State] updateDistance | Entry point.")
		onMsg(input_distance : input_distance(D)) {
			[# var D = payloadArg(0).toInt() #]
			println("[outsonar] | [State] updateDistance | Distance: $D cm.")
			[# resource.notify(getJsonDistance(D)) #]
		} // end onMsg
		
		println("[outsonar] | [State] updateDistance | Exit point.")
	} Goto wait
}