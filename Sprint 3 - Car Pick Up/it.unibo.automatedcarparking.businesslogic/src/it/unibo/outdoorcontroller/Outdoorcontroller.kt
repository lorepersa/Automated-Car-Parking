/* Generated by AN DISI Unibo */ 
package it.unibo.outdoorcontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outdoorcontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				lateinit var DOOR_NAME : String
				var DMIN : Long = 0
				
				var SLOTNUM = 0
				var TOKENID = ""
				
				val resource = itunibo.qakobserver.FactoryQakResource.create(myself)
				
				data class Distance(val distance : Int) {}
				
				val distanceMessageBuilder = object : itunibo.qakobserver.IMessageBuilder {
					
					val gson = com.google.gson.Gson()
					override fun buildMessage(input : String, observerName : String) : ApplMessage {
						val distance = gson.fromJson(input, Distance::class.java).distance
						return MsgUtil.buildEvent(observerName, "auto_outdoor_area_distance", "auto_outdoor_area_distance($distance)")
					}
				}
				
				val outsonarObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "outsonar", distanceMessageBuilder)
				
				val parkingAreaRolodex = itunibo.automatedcarparking.rolodex.ParkingAreaRolodex
				
				lateinit var dtfreeWatchdog : itunibo.qakutils.watchdog.Watchdog 
				val status = itunibo.automatedcarparking.parkingarea.OutdoorAreaStatus(false, false, false)
				val gson = com.google.gson.Gson()
				
				fun getJsonStatus() : String {
					return gson.toJson(status) 
				}
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 val config = itunibo.automatedcarparking.configuration.OutdoorAreaConfigurationReader.read(parkingAreaRolodex.filenameOutdoorAreaConfiguration)  
						 DMIN = config.DMIN  
						 DOOR_NAME = config.doorName  
						 val DTFREE_TIMEOUT = config.DTFREE  
						 dtfreeWatchdog = itunibo.qakutils.watchdog.Watchdog(myself, DTFREE_TIMEOUT, itunibo.automatedcarparking.parkingarea.OutdoorAreaDtfreeTimeoutAutoMessage)  
						println("[outdoorcontroller] | init | Config - DMIN: $DMIN cm")
						println("[outdoorcontroller] | init | Config - Door Name: $DOOR_NAME")
						println("[outdoorcontroller] | init | Config - DTFREE Timeout: $DTFREE_TIMEOUT ms")
						 resource.notify(getJsonStatus()) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t09",targetState="handleCarPickUp",cond=whenRequestGuarded("car_pick_up",{ !status.reserved  
					}))
					transition(edgeName="t010",targetState="handleTokenId",cond=whenReply("valid_tokenid"))
					transition(edgeName="t011",targetState="handleTokenId",cond=whenReply("invalid_tokenid"))
					transition(edgeName="t012",targetState="handleCarPickUpDone",cond=whenDispatch("auto_car_pick_up_done"))
					transition(edgeName="t013",targetState="handleDistance",cond=whenEventGuarded("auto_outdoor_area_distance",{ outsonarObserver.isObserving()  
					}))
					transition(edgeName="t014",targetState="handleDtfreeTimeout",cond=whenEventGuarded("auto_dtfree_timeout",{ dtfreeWatchdog.isRunning()  
					}))
				}	 
				state("handleDistance") { //this:State
					action { //it:State
						 var update_status = false  
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("auto_outdoor_area_distance(D)"), Term.createTerm("auto_outdoor_area_distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0).toInt()  
								if(  D < DMIN  
								 ){println("[outdoorcontroller] | [State] handleDistance | Received Distance < DMIN!")
								if(  !status.engagedByCar  
								 ){println("[outdoorcontroller] | [State] handleDistance | Car in the $DOOR_NAME Area!")
								println("[outdoorcontroller] | [State] handleDistance | $DOOR_NAME Area occupied!")
								println("[outdoorcontroller] | [State] handleDistance | Start DTFREE timer...")
								 update_status = true  
								 dtfreeWatchdog.start()  
								println("[outdoorcontroller] | [State] handleDistance | Inform the user...")
								answer("car_pick_up", "accept_out_success", "accept_out_success(X)"   )  
								}
								 status.engagedByCar = true  
								}
								else
								 {println("[outdoorcontroller] | [State] handleDistance | Received Distance >= DMIN!")
								 if(  status.engagedByCar  
								  ){println("[outdoorcontroller] | [State] handleDistance | Car leaves the $DOOR_NAME Area!")
								 println("[outdoorcontroller] | [State] handleDistance | $DOOR_NAME Area free!")
								 println("[outdoorcontroller] | [State] handleDistance | Stop outsonar observation...")
								 println("[outdoorcontroller] | [State] handleDistance | Stop DTFREE timer...")
								  status.reserved = false  
								  dtfreeWatchdog.stop()  
								  outsonarObserver.cancel()  
								  update_status = true  
								 }
								  status.engagedByCar = false  
								 if(  status.dtfreeTimeoutAlarm  
								  ){ update_status = true  
								 }
								  status.dtfreeTimeoutAlarm = false  
								 }
						}
						if(  update_status  
						 ){ resource.notify(getJsonStatus())  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleCarPickUp") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("car_pick_up(TOKENID)"), Term.createTerm("car_pick_up(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0)  
								println("[outdoorcontroller] | [State] handleCarPickUp | Received TOKENID: $TOKENID.")
								request("validate_tokenid", "validate_tokenid($TOKENID)" ,"parkingslotscontroller" )  
								println("[outdoorcontroller] | [State] handleTokenId | Set $DOOR_NAME Area reserved...")
								 status.reserved = true  
								 resource.notify(getJsonStatus())  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleTokenId") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("valid_tokenid(SLOTNUM)"), Term.createTerm("valid_tokenid(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0).toInt()  
								println("[outdoorcontroller] | [State] handleTokenId | TOKENID ($TOKENID) is valid, slotnum: $SLOTNUM.")
								 val CACHED_DOOR_NAME = DOOR_NAME  
								 val CACHED_SLOTNUM = SLOTNUM  
								
												myself.scope.launch {
													itunibo.automatedcarparking.dsl.transporttrolley.transporttrolley {
														task {
															println("[outdoorcontroller] | [State] handleTokenId | Move the transport trolley to SLOTNUM $CACHED_SLOTNUM...")
															takeOverCar at "$CACHED_SLOTNUM"
															myself.autoMsg("auto_car_taken_over", "auto_car_taken_over(X)")
															println("[outdoorcontroller] | [State] handleTokenId | Move the transport trolley to $CACHED_DOOR_NAME...")
															releaseCar at CACHED_DOOR_NAME
														}
													}
													myself.autoMsg("auto_car_pick_up_done", "auto_car_pick_up_done(X)")
												}
						}
						if( checkMsgContent( Term.createTerm("invalid_tokenid(X)"), Term.createTerm("invalid_tokenid(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[outdoorcontroller] | [State] handleTokenId | TOKENID ($TOKENID) is not valid.")
								println("[outdoorcontroller] | [State] handleTokenId | Set $DOOR_NAME Area free...")
								answer("car_pick_up", "accept_out_failure", "accept_out_failure(X)"   )  
								 status.reserved = false  
								 resource.notify(getJsonStatus())  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleDtfreeTimeout") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("auto_dtfree_timeout(X)"), Term.createTerm("auto_dtfree_timeout(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[outdoorcontroller] | [State] handleExitOutdoorAreaTimeout | DTFREE time limit reached.")
								 dtfreeWatchdog.stop()  
								 status.dtfreeTimeoutAlarm = true  
								 resource.notify(getJsonStatus())  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleCarTakeOver") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("[outdoorcontroller] | [State] handleCarTakeOver")
						forward("free_parking_slot", "free_parking_slot($SLOTNUM,$TOKENID)" ,"parkingslotscontroller" ) 
					}
				}	 
				state("handleCarPickUpDone") { //this:State
					action { //it:State
						println("[outdoorcontroller] | [State] handleCarPickUpDone")
						 outsonarObserver.observe()  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
