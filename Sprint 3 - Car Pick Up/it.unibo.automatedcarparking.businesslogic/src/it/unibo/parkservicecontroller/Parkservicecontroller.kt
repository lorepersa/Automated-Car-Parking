/* Generated by AN DISI Unibo */ 
package it.unibo.parkservicecontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkservicecontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var handling_parking_car_interest = false
				var handling_car_enter = false
				var handling_car_pick_up = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t016",targetState="handleIndoorArea",cond=whenRequestGuarded("parking_car_interest",{ !handling_parking_car_interest  
					}))
					transition(edgeName="t017",targetState="handleIndoorArea",cond=whenRequestGuarded("car_enter",{ !handling_car_enter  
					}))
					transition(edgeName="t018",targetState="handleOutdoorArea",cond=whenRequestGuarded("car_pick_up",{ !handling_car_pick_up  
					}))
					transition(edgeName="t019",targetState="handleIndoorArea",cond=whenReply("inform_in"))
					transition(edgeName="t020",targetState="handleIndoorArea",cond=whenReply("response_car_enter"))
					transition(edgeName="t021",targetState="handleOutdoorArea",cond=whenReply("accept_out_success"))
					transition(edgeName="t022",targetState="handleOutdoorArea",cond=whenReply("accept_out_failure"))
				}	 
				state("handleIndoorArea") { //this:State
					action { //it:State
						 var message_sent = false  
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("parking_car_interest(X)"), Term.createTerm("parking_car_interest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 handling_parking_car_interest = true  
								request("parking_car_interest", "parking_car_interest(X)" ,"indoorcontroller" )  
								 message_sent = true  
						}
						if( checkMsgContent( Term.createTerm("car_enter(SLOTNUM)"), Term.createTerm("car_enter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM = -1  
								 try {
												SLOTNUM = payloadArg(0).toInt()
											} catch (e : Exception) {}  
								if(  SLOTNUM >= 0  
								 ){ handling_car_enter = true  
								request("car_enter", "car_enter($SLOTNUM)" ,"indoorcontroller" )  
								 message_sent = true  
								}
						}
						if( checkMsgContent( Term.createTerm("inform_in(SLOTNUM)"), Term.createTerm("inform_in(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 handling_parking_car_interest = false  
								 val SLOTNUM = payloadArg(0).toInt()  
								answer("parking_car_interest", "inform_in", "inform_in($SLOTNUM)"   )  
								 message_sent = true  
						}
						if( checkMsgContent( Term.createTerm("response_car_enter(TOKENID)"), Term.createTerm("response_car_enter(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 handling_car_enter = false  
								 val TOKENID = payloadArg(0)  
								answer("car_enter", "response_car_enter", "response_car_enter($TOKENID)"   )  
								 message_sent = true  
						}
						if(  !message_sent  
						 ){answer("car_enter", "response_car_enter", "response_car_enter(InvalidSlotnum)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleOutdoorArea") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 var message_sent = false  
						if( checkMsgContent( Term.createTerm("car_pick_up(TOKENID)"), Term.createTerm("car_pick_up(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 message_sent = true  
								 handling_car_pick_up = true  
								 val TOKENID = payloadArg(0)  
								request("car_pick_up", "car_pick_up($TOKENID)" ,"outdoorcontroller" )  
						}
						if( checkMsgContent( Term.createTerm("accept_out_success(X)"), Term.createTerm("accept_out_success(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 message_sent = true  
								 handling_car_pick_up = false  
								answer("car_pick_up", "accept_out_success", "accept_out_success(X)"   )  
						}
						if( checkMsgContent( Term.createTerm("accept_out_failure(X)"), Term.createTerm("accept_out_failure(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 message_sent = true  
								 handling_car_pick_up = false  
								answer("car_pick_up", "accept_out_failure", "accept_out_failure(X)"   )  
						}
						if(  !message_sent  
						 ){answer("car_pick_up", "accept_out_failure", "accept_out_failure(X)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
