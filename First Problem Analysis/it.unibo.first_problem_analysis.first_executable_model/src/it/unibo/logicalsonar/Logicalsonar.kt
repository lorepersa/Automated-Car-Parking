/* Generated by AN DISI Unibo */ 
package it.unibo.logicalsonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Logicalsonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var THRESHOLD = 100.0f
				var object_detected = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[logicalsonar] | [State] init | Entry point.")
						
									THRESHOLD = 100.0f
									object_detected = false
						println("[logicalsonar] | [State] init | THRESHOLD: $THRESHOLD.")
						println("[logicalsonar] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="handleDistanceEvent", cond=doswitch() )
				}	 
				state("handleDistanceEvent") { //this:State
					action { //it:State
						println("[logicalsonar] | [State] handleDistanceEvent | Entry point.")
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var D = payloadArg(0).toFloat()  
								println("[logicalsonar] | [State] handleDistanceEvent | Received event distance: $D.")
								if(  object_detected  
								 ){if(  D >= THRESHOLD  
								 ){println("[logicalsonar] | [State] handleDistanceEvent | Emit outdoor_area_free.")
								 object_detected = false  
								emit("outdoor_area_free", "outdoor_area_free(X)" ) 
								}
								}
								else
								 {if(  D < THRESHOLD  
								  ){println("[logicalsonar] | [State] handleDistanceEvent | Emit outdoor_area_occupied.")
								  object_detected = true  
								 emit("outdoor_area_occupied", "outdoor_area_occupied(X)" ) 
								 }
								 }
						}
						println("[logicalsonar] | [State] handleDistanceEvent | Exit point.")
					}
					 transition(edgeName="t_distance_filter3",targetState="handleDistanceEvent",cond=whenEvent("distance"))
				}	 
			}
		}
}
