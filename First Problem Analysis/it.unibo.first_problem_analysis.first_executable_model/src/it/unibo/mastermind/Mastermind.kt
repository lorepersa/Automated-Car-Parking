/* Generated by AN DISI Unibo */ 
package it.unibo.mastermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mastermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var SLOTNUM = 0 
				var TOKENID = "" 
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[mastermind] | [State] init | Entry point.")
						delay(5000) 
						println("[mastermind] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="carEnterIndoorArea", cond=doswitch() )
				}	 
				state("carEnterIndoorArea") { //this:State
					action { //it:State
						println("[mastermind] | [State] carEnterIndoorArea | Entry point.")
						request("req_client_accept_in", "req_client_accept_in(X)" ,"parkservicegui" )  
						println("[mastermind] | [State] carEnterIndoorArea | Exit point.")
					}
					 transition(edgeName="t058",targetState="receiveSlotnum",cond=whenReply("rep_client_accept_in"))
				}	 
				state("receiveSlotnum") { //this:State
					action { //it:State
						println("[mastermind] | [State] receiveSlotnum | Entry point.")
						if( checkMsgContent( Term.createTerm("rep_client_accept_in(SLOTNUM)"), Term.createTerm("rep_client_accept_in(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0).toInt()  
								println("[mastermind] | [State] receiveSlotnum | SLOTNUM: $SLOTNUM.")
						}
						println("[mastermind] | [State] receiveSlotnum | Exit point.")
						stateTimer = TimerActor("timer_receiveSlotnum", 
							scope, context!!, "local_tout_mastermind_receiveSlotnum", 2000.toLong() )
					}
					 transition(edgeName="t059",targetState="carDetectedByWeightSensor",cond=whenTimeout("local_tout_mastermind_receiveSlotnum"))   
				}	 
				state("carDetectedByWeightSensor") { //this:State
					action { //it:State
						println("[mastermind] | [State] carDetectedByWeightSensor | Entry point.")
						 val W = 800.0f  
						forward("input_weight", "input_weight($W)" ,"physicalweightsensor" ) 
						println("[mastermind] | [State] carDetectedByWeightSensor | Exit point.")
						stateTimer = TimerActor("timer_carDetectedByWeightSensor", 
							scope, context!!, "local_tout_mastermind_carDetectedByWeightSensor", 2000.toLong() )
					}
					 transition(edgeName="t060",targetState="pressCarEnterButton",cond=whenTimeout("local_tout_mastermind_carDetectedByWeightSensor"))   
				}	 
				state("pressCarEnterButton") { //this:State
					action { //it:State
						println("[mastermind] | [State] pressCarEnterButton | Entry point.")
						request("req_client_car_enter", "req_client_car_enter($SLOTNUM)" ,"parkservicegui" )  
						println("[mastermind] | [State] pressCarEnterButton | Exit point.")
					}
					 transition(edgeName="t061",targetState="readTokenId",cond=whenReply("rep_client_car_enter"))
				}	 
				state("readTokenId") { //this:State
					action { //it:State
						println("[mastermind] | [State] readTokenId | Entry point.")
						if( checkMsgContent( Term.createTerm("rep_client_car_enter(TOKENID)"), Term.createTerm("rep_client_car_enter(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0)  
								println("[mastermind] | [State] readTokenId | TOKENID: $TOKENID.")
						}
						println("[mastermind] | [State] readTokenId | Exit point.")
					}
					 transition( edgeName="goto",targetState="transportrolleyWithdrawCar", cond=doswitch() )
				}	 
				state("transportrolleyWithdrawCar") { //this:State
					action { //it:State
						println("[mastermind] | [State] transportrolleyWithdrawCar | Entry point.")
						 val W = 0.0f  
						forward("input_weight", "input_weight($W)" ,"physicalweightsensor" ) 
						println("[mastermind] | [State] transportrolleyWithdrawCar | Exit point.")
					}
					 transition( edgeName="goto",targetState="idleUntilPickupRequest", cond=doswitch() )
				}	 
				state("idleUntilPickupRequest") { //this:State
					action { //it:State
						println("[mastermind] | [State] idleUntilPickupRequest | Entry point.")
						delay(10000) 
						println("[mastermind] | [State] idleUntilPickupRequest | Exit point.")
					}
					 transition( edgeName="goto",targetState="pickupRequest", cond=doswitch() )
				}	 
				state("pickupRequest") { //this:State
					action { //it:State
						println("[mastermind] | [State] pickupRequest | Entry point.")
						request("req_client_accept_out", "req_client_accept_out($TOKENID)" ,"parkservicegui" )  
						println("[mastermind] | [State] pickupRequest | Exit point.")
					}
					 transition(edgeName="t062",targetState="carDetectedByOutSonar",cond=whenReply("rep_client_accept_out_success"))
				}	 
				state("carDetectedByOutSonar") { //this:State
					action { //it:State
						println("[mastermind] | [State] carDetectedByOutSonar | Entry point.")
						 val  D = 10.0f  
						forward("input_distance", "input_distance($D)" ,"physicalsonar" ) 
						println("[mastermind] | [State] carDetectedByOutSonar | Exit point.")
						stateTimer = TimerActor("timer_carDetectedByOutSonar", 
							scope, context!!, "local_tout_mastermind_carDetectedByOutSonar", 2000.toLong() )
					}
					 transition(edgeName="t063",targetState="carLeaveOutdoorArea",cond=whenTimeout("local_tout_mastermind_carDetectedByOutSonar"))   
				}	 
				state("carLeaveOutdoorArea") { //this:State
					action { //it:State
						println("[mastermind] | [State] carLeaveOutdoorArea | Entry point.")
						 val  D = 200.0f  
						forward("input_distance", "input_distance($D)" ,"physicalsonar" ) 
						println("[mastermind] | [State] carLeaveOutdoorArea | Exit point.")
						stateTimer = TimerActor("timer_carLeaveOutdoorArea", 
							scope, context!!, "local_tout_mastermind_carLeaveOutdoorArea", 3000.toLong() )
					}
					 transition(edgeName="t064",targetState="end",cond=whenTimeout("local_tout_mastermind_carLeaveOutdoorArea"))   
				}	 
				state("end") { //this:State
					action { //it:State
						println("[mastermind] | [State] end")
					}
				}	 
			}
		}
}
