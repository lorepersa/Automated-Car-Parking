/* Generated by AN DISI Unibo */ 
package it.unibo.thermometer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Thermometer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[thermometer] | [State] init | Entry point.")
						updateResourceRep( "thermometer(22)"  
						)
						println("[thermometer] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("[thermometer] | [State] wait | Entry point.")
						println("[thermometer] | [State] wait | Exit point.")
					}
					 transition(edgeName="t00",targetState="updateTemperature",cond=whenDispatch("input_temperature"))
				}	 
				state("updateTemperature") { //this:State
					action { //it:State
						println("[thermometer] | [State] updateTemperature | Entry point.")
						if( checkMsgContent( Term.createTerm("input_temperature(T)"), Term.createTerm("input_temperature(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var T = payloadArg(0).toInt()  
								println("[thermometer] | [State] updateTemperature | Temperature: $T °C.")
								updateResourceRep( "thermometer($T)"  
								)
						}
						println("[thermometer] | [State] updateTemperature | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
