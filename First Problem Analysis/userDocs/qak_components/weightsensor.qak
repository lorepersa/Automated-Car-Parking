
System first_model

Event     weight               : weight( W )
Event     indoor_area_occupied : indoor_area_occupied( X )
Event     indoor_area_free     : indoor_area_free( C )

Dispatch  input_weight         : input_weight( W )

Context ctxFirstModel  ip [host="localhost" port=8053]


QActor physicalweightsensor context ctxFirstModel {
	State init initial {	 
		println("[physicalweightsensor] | [State] init | Entry point.")
		println("[physicalweightsensor] | [State] init | Exit point.")
   	} Goto wait
   	
   	State wait {
   		println("[physicalweightsensor] | [State] wait | Entry point.")
   		onMsg(input_weight : input_weight(W)) {
   			[# val W = payloadArg(0).toFloat() #]
   			emit weight : weight($W)
   		}
   		println("[physicalweightsensor] | [State] wait | Exit point.")
   	} Transition t0
   	whenMsg input_weight -> wait
   	
}

QActor logicalweightsensor context ctxFirstModel {
	[#
		var CAR_WEIGHT_THRESHOLD = 750.0f
		var th_reached = false
	#]
	
	State init initial {
		println("[logicalweightsensor] | [State] init | Entry point.")
		[#
			CAR_WEIGHT_THRESHOLD = 750.0f
			th_reached = false
		#]
		println("[logicalweightsensor] | [State] init | CAR_WEIGHT_THRESHOLD: $CAR_WEIGHT_THRESHOLD.")
		println("[logicalweightsensor] | [State] init | Exit point.")
	} Goto handleWeightEvent
	
	/**
   	 * Each time a weight(W) event is received handle that event.
   	 * 
   	 * When a transition from weight lower or equal to CAR_WEIGHT_THRESHOLD to greater than CAR_WEIGHT_THRESHOLD
   	 * is intercepted then emit an indoor_area_occupied event.
   	 * 
   	 * When a transition from weight greater than CAR_WEIGHT_THRESHOLD to lower or equal to CAR_WEIGHT_THRESHOLD
   	 * is intercepted then emit an indoor_area_free event.
   	 */
	State handleWeightEvent {
		println("[logicalweightsensor] | [State] handleWeightEvent | Entry point.")
		onMsg(weight : weight(W)) {
			[# var W = payloadArg(0).toFloat() #] 
			println("[logicalweightsensor] | [State] handleWeightEvent | Received event weight: $W.")
			if [# th_reached #] {
				
				// Case 1: Previous weight higher than CAR_WEIGHT_THRESHOLD
				
				if [# W <= CAR_WEIGHT_THRESHOLD #] {
					
					// Case 1.1: Current weight lower or equal CAR_WEIGHT_THRESHOLD. Now emit an indoor_area_free event.
					
					println("[logicalweightsensor] | [State] handleWeightEvent | Emit indoor_area_free.")
					[# th_reached = false #]
					emit indoor_area_free : indoor_area_free(X)
				}
			} else {
				
				// Case 2: Previous weight lower or equal to CAR_WEIGHT_THRESHOLD
				
				if [# W > CAR_WEIGHT_THRESHOLD #] {
					
					// Case 2.1: Current weight greater than CAR_WEIGHT_THRESHOLD. Now emit an indoor_area_occupied event.
					
					println("[logicalweightsensor] | [State] handleWeightEvent | Emit indoor_area_occupied.")
					[# th_reached = true #]
					emit indoor_area_occupied : indoor_area_occupied(X)
				}
			}
		} // end onMsg
		
		println("[logicalweightsensor] | [State] handleWeightEvent | Exit point.")
	} Transition t_weight_filter
	whenEvent weight -> handleWeightEvent
}