
System first_model

Request   transport_trolley_car_park         : transport_trolley_car_park( SLOTNUM )
Reply     transport_trolley_car_park_done    : transport_trolley_car_park_done( X )
Request   transport_trolley_car_pickup       : transport_trolley_car_pickup( SLOTNUM )
Reply     transport_trolley_car_pickup_done  : transport_trolley_car_pickup_done( X )
Dispatch  transport_trolley_go_home          : transport_trolley_go_home( X )
Dispatch  transport_trolley_start            : transport_trolley_start( X )
Dispatch  transport_trolley_stop             : transport_trolley_stop( X )

Dispatch  transport_trolley_at_indoor        : transport_trolley_at_indoor(X)
Event     transport_trolley_new_state        : transport_trolley_new_state( STATE )

Context ctxFirstModel  ip [host="localhost" port=8053]


QActor logicaltransporttrolley context ctxFirstModel {
	
	[# 
		var SLOTNUM = 0
		var AT_HOME = false
		var CURRENT_STATE = "IDLE"
		var CURRENT_POSITION = "HOME"
		var CURRENT_JOB = "NONE"
	#]
	  
	State init initial {
		
		// as per requirements the transport trolley initially is at HOME location
		println("[logicaltransporttrolley] | [State] init | Entry point.") 
		[# 
			SLOTNUM = 0
			AT_HOME = true
			CURRENT_STATE = "IDLE"
			CURRENT_POSITION = "home"
			CURRENT_JOB = "NONE"
		#]
		println("[logicaltransporttrolley] | [State] init | Exit point.") 
	} Goto wait
	
	State wait {
		println("[logicaltransporttrolley] | [State] wait | Entry point.") 
		[# CURRENT_JOB = "NONE" #]
		println("[logicaltransporttrolley] | [State] wait | Exit point.") 
	} Transition t0
	whenRequest transport_trolley_car_park -> carParkTask
	whenRequest transport_trolley_car_pickup -> carPickupTask
	whenMsg     transport_trolley_go_home -> backToHomeTask 
	
	State waitOrGoHome {
		println("[logicaltransporttrolley] | [State] wait_or_go_home | Entry point.") 
		[# CURRENT_JOB = "NONE" #]
		println("[logicaltransporttrolley] | [State] wait_or_go_home | Exit point.") 
	} Transition t0 whenTime 3000 -> backToHomeTask
	whenRequest transport_trolley_car_park -> carParkTask
	whenRequest transport_trolley_car_pickup -> carPickupTask
	whenMsg     transport_trolley_go_home -> backToHomeTask 
	
	/*****************************************************************************
	 * BEGIN TASK GO TO HOME
	 *****************************************************************************/
	
	State backToHomeTask {
		println("[logicaltransporttrolley] | [State] backToHomeTask | Entry point.")
		
		if [# !AT_HOME #] {
			println("[logicaltransporttrolley] | [State] backToHomeTask | Going to HOME")
			[# CURRENT_JOB = "BackToHome"#]
			delay 3000
			[# AT_HOME = true #]
			println("[logicaltransporttrolley] | [State] backToHomeTask | Reached HOME") 
			[# CURRENT_STATE = "IDLE" #]
			[# CURRENT_POSITION = "HOME" #]
			emit transport_trolley_new_state : transport_trolley_new_state( $CURRENT_STATE )
			
			println("[logicaltransporttrolley] | [State] backToHomeTask | Exit point.") 
		} 

	} Goto wait
	
	/*****************************************************************************
	 * END TASK GO TO HOME
	 *****************************************************************************/
	
	/*****************************************************************************
	 * BEGIN TASK CAR PARK
	 *****************************************************************************/
	
	State carParkTask {
		println("[logicaltransporttrolley] | [State] carParkTask | Entry point.") 
		[# AT_HOME = false #]
		if [# CURRENT_STATE == "IDLE" #] {
			[# CURRENT_STATE = "WORKING" #]
			emit transport_trolley_new_state : transport_trolley_new_state( $CURRENT_STATE )
		}
		onMsg(transport_trolley_car_park : transport_trolley_car_park( SLOTNUM )) {
			[# SLOTNUM = payloadArg(0).toInt() #]
		}
		
		[# CURRENT_JOB = "CarPark"#]
		
		println("[logicaltransporttrolley] | [State] carParkTask | Exit point.") 
	} Goto goToIndoorAndTakeOverTask
	
		
	State goToIndoorAndTakeOverTask {
		println("[logicaltransporttrolley] | [State] goToIndoorAndTakeOverTask | Entry point.") 
		println("[logicaltransporttrolley] | [State] goToIndoorAndTakeOverTask | Going to INDOOR")
		delay 3000
		println("[logicaltransporttrolley] | [State] goToIndoorAndTakeOverTask | Reached INDOOR") 
		forward businesslogic -m transport_trolley_at_indoor : transport_trolley_at_indoor(X)
		[# CURRENT_POSITION = "INDOOR"#]
		println("[logicaltransporttrolley] | [State] goToIndoorAndTakeOverTask | Take over car...") 
		//delay 1000
		println("[logicaltransporttrolley] | [State] goToIndoorAndTakeOverTask | Car taked over.") 
		println("[logicaltransporttrolley] | [State] goToIndoorAndTakeOverTask | Exit point.") 
	} Goto goToSlotNumAndReleaseTask
	
	State goToSlotNumAndReleaseTask {
		println("[logicaltransporttrolley] | [State] goToSlotNumAndReleaseTask | Entry point.") 
		println("[logicaltransporttrolley] | [State] goToSlotNumAndReleaseTask | Going to SLOTNUM $SLOTNUM")
		delay 3000
		[# CURRENT_POSITION = "$SLOTNUM"#]
		println("[logicaltransporttrolley] | [State] goToSlotNumAndReleaseTask | Reached SLOTNUM $SLOTNUM") 
		println("[logicaltransporttrolley] | [State] goToSlotNumAndReleaseTask | Releasing car...") 
		//delay 1000
		println("[logicaltransporttrolley] | [State] goToSlotNumAndReleaseTask | Car released.")
		
		replyTo transport_trolley_car_park with transport_trolley_car_park_done : transport_trolley_car_park_done(X)
		 
		println("[logicaltransporttrolley] | [State] goToSlotNumAndReleaseTask | Exit point.") 
	} Goto waitOrGoHome
	
	/*****************************************************************************
	 * END TASK CAR PARK
	 *****************************************************************************/
	 
	 	
	/*****************************************************************************
	 * BEGIN TASK CAR PICKUP
	 *****************************************************************************/
	
	State carPickupTask {
		println("[logicaltransporttrolley] | [State] carPickupTask | Entry point.") 
		[# AT_HOME = false #]
		if [# CURRENT_STATE == "IDLE" #] {
			[# CURRENT_STATE = "WORKING" #]
			emit transport_trolley_new_state : transport_trolley_new_state( $CURRENT_STATE )
		}
		
		onMsg(transport_trolley_car_pickup : transport_trolley_car_pickup( SLOTNUM )) {
			[# SLOTNUM = payloadArg(0).toInt() #]
		}
		
		[# CURRENT_JOB = "CarPickup"#]
		println("[logicaltransporttrolley] | [State] carPickupTask | Exit point.") 
	} Goto goToSlotNumAndTakeOverTask
	
	State goToSlotNumAndTakeOverTask {
		println("[logicaltransporttrolley] | [State] goToSlotNumAndTakeOverTask | Entry point.") 
		println("[logicaltransporttrolley] | [State] goToSlotNumAndTakeOverTask | Going to SLOTNUM $SLOTNUM.")
		delay 3000
		[# CURRENT_POSITION = "$SLOTNUM"#]
		println("[logicaltransporttrolley] | [State] goToSlotNumAndTakeOverTask | Reached SLOTNUM $SLOTNUM.") 
		println("[logicaltransporttrolley] | [State] goToSlotNumAndTakeOverTask | Take over car...") 
		//delay 1000
		println("[logicaltransporttrolley] | [State] goToSlotNumAndTakeOverTask | Car taked over.") 
		println("[logicaltransporttrolley] | [State] goToSlotNumAndTakeOverTask | Exit point.") 
	} Goto goToOutdoorAndReleaseTask
	
	State goToOutdoorAndReleaseTask {
		println("[logicaltransporttrolley] | [State] goToOutdoorAndReleaseTask | Entry point.") 
		println("[logicaltransporttrolley] | [State] goToOutdoorAndReleaseTask | Going to OUTDOOR.")
		delay 3000
		[# CURRENT_POSITION = "OUTDOOR"#]
		println("[logicaltransporttrolley] | [State] goToOutdoorAndReleaseTask | Reached OUTDOOR.") 
		println("[logicaltransporttrolley] | [State] goToOutdoorAndReleaseTask | Releasing car...") 
		//delay 1000
		println("[logicaltransporttrolley] | [State] goToOutdoorAndReleaseTask | Car released.") 
		
		replyTo transport_trolley_car_pickup with transport_trolley_car_pickup_done : transport_trolley_car_pickup_done(X)
		
		println("[logicaltransporttrolley] | [State] goToOutdoorAndReleaseTask | Exit point.") 
	} Goto waitOrGoHome
	
	/*****************************************************************************
	 * END TASK CAR PICKUP
	 *****************************************************************************/
	
}