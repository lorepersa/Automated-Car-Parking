/* Generated by AN DISI Unibo */ 
package it.unibo.parkservicestatusgui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkservicestatusgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val businesslogicObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "businesslogic")  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 businesslogicObserver.observe()  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | wait")
					}
					 transition(edgeName="t07",targetState="updateStatus",cond=whenDispatch("update"))
				}	 
				state("updateStatus") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
