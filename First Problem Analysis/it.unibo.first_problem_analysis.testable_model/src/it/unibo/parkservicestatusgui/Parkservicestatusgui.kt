/* Generated by AN DISI Unibo */ 
package it.unibo.parkservicestatusgui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkservicestatusgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var TMAX = 35.0f
				var P1 = "FREE" 
				var P2 = "FREE" 
				var P3 = "FREE" 
				var P4 = "FREE" 
				var P5 = "FREE" 
				var P6 = "FREE" 
				var indoor_area = "FREE"
				var outdoor_area = "FREE"
				var transport_trolley_status = "IDLE"
				var fan_mode = "AUTOMATIC"
				var fan_status = "OFF"
				var temperature = 18.0f
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] init | Entry point.")
						
									P1 = "FREE" 
									P2 = "FREE" 
									P3 = "FREE" 
									P4 = "FREE" 
									P5 = "FREE" 
									P6 = "FREE" 
									indoor_area = "FREE"
									outdoor_area = "FREE"
									transport_trolley_status = "IDLE"
									fan_mode = "AUTOMATIC"
									fan_status = "OFF"
									temperature = 18.0f
						updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
									"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
									"transport_trolley($transport_trolley_status) - " +
									"fan($fan_mode,$fan_status) - " +
									"temperature($temperature)" 
						)
						println("[parkservicestatusgui] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("discardAll") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("setup(X)"), Term.createTerm("setup(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] init | Setup.")
								answer("setup", "done", "done(X)"   )  
						}
						stateTimer = TimerActor("timer_discardAll", 
							scope, context!!, "local_tout_parkservicestatusgui_discardAll", 1000.toLong() )
					}
					 transition(edgeName="t069",targetState="init",cond=whenTimeout("local_tout_parkservicestatusgui_discardAll"))   
					transition(edgeName="t070",targetState="discardAll",cond=whenRequest("req_manager_fan_automatic_mode"))
					transition(edgeName="t071",targetState="discardAll",cond=whenRequest("req_manager_fan_manual_mode"))
					transition(edgeName="t072",targetState="discardAll",cond=whenRequest("req_manager_fan_on"))
					transition(edgeName="t073",targetState="discardAll",cond=whenRequest("req_manager_fan_off"))
				}	 
				state("wait") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] wait | Entry point.")
						println("[parkservicestatusgui] | [State] wait | Exit point.")
					}
					 transition(edgeName="t074",targetState="handleManagerRequest",cond=whenRequest("req_manager_fan_automatic_mode"))
					transition(edgeName="t075",targetState="handleManagerRequest",cond=whenRequest("req_manager_fan_manual_mode"))
					transition(edgeName="t076",targetState="handleManagerRequest",cond=whenRequest("req_manager_fan_on"))
					transition(edgeName="t077",targetState="handleManagerRequest",cond=whenRequest("req_manager_fan_off"))
					transition(edgeName="t078",targetState="handleModeFanUpdate",cond=whenEvent("mode_fan_automatic"))
					transition(edgeName="t079",targetState="handleModeFanUpdate",cond=whenEvent("mode_fan_manual"))
					transition(edgeName="t080",targetState="handleStatusFanUpdate",cond=whenEvent("state_fan_on"))
					transition(edgeName="t081",targetState="handleStatusFanUpdate",cond=whenEvent("state_fan_off"))
					transition(edgeName="t082",targetState="handleStatusIndoorArea",cond=whenEvent("indoor_area_free"))
					transition(edgeName="t083",targetState="handleStatusIndoorArea",cond=whenEvent("indoor_area_occupied"))
					transition(edgeName="t084",targetState="handleStatusOutdoorArea",cond=whenEvent("outdoor_area_free"))
					transition(edgeName="t085",targetState="handleStatusOutdoorArea",cond=whenEvent("outdoor_area_occupied"))
					transition(edgeName="t086",targetState="handleStatusParkingSlots",cond=whenEvent("status_parking_slots"))
					transition(edgeName="t087",targetState="handleStatusTransportTrolley",cond=whenEvent("transport_trolley_new_state"))
					transition(edgeName="t088",targetState="handleStatusTemperature",cond=whenEvent("temperature"))
					transition(edgeName="t089",targetState="discardAll",cond=whenRequest("setup"))
				}	 
				state("handleManagerRequest") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleManagerRequest | Entry point.")
						if( checkMsgContent( Term.createTerm("req_manager_fan_automatic_mode(X)"), Term.createTerm("req_manager_fan_automatic_mode(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleManagerRequest | Propagate FAN AUTOMATIC MODE message.")
								forward("automatic_mode", "automatic_mode(X)" ,"logicalfan" ) 
								answer("req_manager_fan_automatic_mode", "rep_manager_done", "rep_manager_done(X)"   )  
						}
						if( checkMsgContent( Term.createTerm("req_manager_fan_manual_mode(X)"), Term.createTerm("req_manager_fan_manual_mode(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleManagerRequest | Propagate FAN MANUAL MODE message.")
								forward("manual_mode", "manual_mode(X)" ,"logicalfan" ) 
								answer("req_manager_fan_manual_mode", "rep_manager_done", "rep_manager_done(X)"   )  
						}
						if( checkMsgContent( Term.createTerm("req_manager_fan_on(X)"), Term.createTerm("req_manager_fan_on(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleManagerRequest | Propagate FAN ON message.")
								forward("logical_fan_on", "logical_fan_on(X)" ,"logicalfan" ) 
								answer("req_manager_fan_on", "rep_manager_done", "rep_manager_done(X)"   )  
						}
						if( checkMsgContent( Term.createTerm("req_manager_fan_off(X)"), Term.createTerm("req_manager_fan_off(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleManagerRequest | Propagate FAN OFF message.")
								forward("logical_fan_off", "logical_fan_off(X)" ,"logicalfan" ) 
								answer("req_manager_fan_off", "rep_manager_done", "rep_manager_done(X)"   )  
						}
						println("[parkservicestatusgui] | [State] handleManagerRequest | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleModeFanUpdate") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleModeFanUpdate | Entry point.")
						if( checkMsgContent( Term.createTerm("mode_fan_automatic(X)"), Term.createTerm("mode_fan_automatic(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleModeFanUpdate | Fan status: ON.")
								emit("msg_to_manager_status_fan", "msg_to_manager_status_fan(ON)" ) 
								 fan_mode = "AUTOMATIC"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						if( checkMsgContent( Term.createTerm("mode_fan_manual(X)"), Term.createTerm("mode_fan_manual(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleModeFanUpdate | Fan status: OFF.")
								emit("msg_to_manager_status_fan", "msg_to_manager_status_fan(OFF)" ) 
								 fan_mode = "MANUAL"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleModeFanUpdate | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleStatusFanUpdate") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleStatusUpdate | Entry point.")
						if( checkMsgContent( Term.createTerm("state_fan_on(X)"), Term.createTerm("state_fan_on(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleStatusUpdate | Fan status: ON.")
								emit("msg_to_manager_status_fan", "msg_to_manager_status_fan(ON)" ) 
								 fan_status = "ON"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						if( checkMsgContent( Term.createTerm("state_fan_off(X)"), Term.createTerm("state_fan_off(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleStatusUpdate | Fan status: OFF.")
								emit("msg_to_manager_status_fan", "msg_to_manager_status_fan(OFF)" ) 
								 fan_status = "OFF"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleStatusUpdate | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleStatusTransportTrolley") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleStatusTransportTrolley | Entry point.")
						if( checkMsgContent( Term.createTerm("transport_trolley_new_state(STATE)"), Term.createTerm("transport_trolley_new_state(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var STATUS = payloadArg(0)  
								println("[parkservicestatusgui] | [State] handleStatusTransportTrolley | TransportTrolley status: $STATUS.")
								emit("msg_to_manager_status_transport_trolley", "msg_to_manager_status_transport_trolley($STATUS)" ) 
								 transport_trolley_status = "$STATUS"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleStatusTransportTrolley | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleStatusTemperature") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleStatusTemperature | Entry point.")
						if( checkMsgContent( Term.createTerm("temperature(C)"), Term.createTerm("temperature(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TEMPERATURE = payloadArg(0).toFloat()  
								println("[parkservicestatusgui] | [State] handleStatusTemperature | Thermometer measured temperature: $TEMPERATURE.")
								if(  TEMPERATURE > TMAX  
								 ){println("[parkservicestatusgui] | [State] handleStatusTemperature | Temperature GREATER THAN TMAX.")
								}
								else
								 {println("[parkservicestatusgui] | [State] handleStatusTemperature | Thermometer LOWER THAN OR EQUAL TO TMAX.")
								 }
								emit("msg_to_manager_status_temperature", "msg_to_manager_status_temperature($TEMPERATURE)" ) 
								 temperature = "$TEMPERATURE".toFloat()  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleStatusTemperature | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleStatusParkingSlots") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleStatusParkingSlots | Entry point.")
						if( checkMsgContent( Term.createTerm("status_parking_slots(P1,P2,P3,P4,P5,P6)"), Term.createTerm("status_parking_slots(P1,P2,P3,P4,P5,P6)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								   				P1 = payloadArg(0)
								   				P2 = payloadArg(1)
								   				P3 = payloadArg(2)
								   				P4 = payloadArg(3)
								   				P5 = payloadArg(4)
								   				P6 = payloadArg(5)
								println("[parkservicestatusgui] | [State] handleStatusParkingSlots | Status parking slots: [$P1,$P2,$P3,$P4,$P5,$P6].")
								emit("msg_to_manager_status_parking_slots", "msg_to_manager_status_parking_slots($P1,$P2,$P3,$P4,$P5,$P6)" ) 
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleStatusParkingSlots | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleStatusIndoorArea") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleStatusIndoorArea | Entry point.")
						if( checkMsgContent( Term.createTerm("indoor_area_free(C)"), Term.createTerm("indoor_area_free(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleStatusIndoorArea | Status indoor area: FREE.")
								emit("msg_to_manager_status_indoor_area", "msg_to_manager_status_indoor_area(FREE)" ) 
								 indoor_area = "FREE"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode, $fan_status) - " +
											"temperature($temperature)" 
								)
						}
						if( checkMsgContent( Term.createTerm("indoor_area_occupied(X)"), Term.createTerm("indoor_area_occupied(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleStatusIndoorArea | Status indoor area: OCCUPIED.")
								emit("msg_to_manager_status_indoor_area", "msg_to_manager_status_indoor_area(OCCUPIED)" ) 
								 indoor_area = "OCCUPIED"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleStatusIndoorArea | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleStatusOutdoorArea") { //this:State
					action { //it:State
						println("[parkservicestatusgui] | [State] handleStatusOutdoorArea | Entry point.")
						if( checkMsgContent( Term.createTerm("outdoor_area_free(X)"), Term.createTerm("outdoor_area_free(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleStatusOutdoorArea | Status outdoor area: FREE.")
								emit("msg_to_manager_status_outdoor_area", "msg_to_manager_status_outdoor_area(FREE)" ) 
								 outdoor_area = "FREE"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						if( checkMsgContent( Term.createTerm("outdoor_area_occupied(X)"), Term.createTerm("outdoor_area_occupied(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[parkservicestatusgui] | [State] handleStatusOutdoorArea | Status outdoor area: OCCUPIED.")
								emit("msg_to_manager_status_outdoor_area", "msg_to_manager_status_outdoor_area(OCCUPIED)" ) 
								 outdoor_area = "FREE"  
								updateResourceRep( "parking_slots($P1,$P2,$P3,$P4,$P5,$P6) - " +
											"indoor_area($indoor_area) - outdoor_area($outdoor_area) - " +
											"transport_trolley($transport_trolley_status) - " +
											"fan($fan_mode,$fan_status) - " +
											"temperature($temperature)" 
								)
						}
						println("[parkservicestatusgui] | [State] handleStatusOutdoorArea | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
