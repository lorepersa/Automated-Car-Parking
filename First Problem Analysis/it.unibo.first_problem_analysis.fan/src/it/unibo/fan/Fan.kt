/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var fan_on = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[fan] | [State] init | Entry point.")
						println("[fan] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("[fan] | [State] wait | Entry point.")
						if(  fan_on  
						 ){updateResourceRep( "fan(ON)"  
						)
						}
						else
						 {updateResourceRep( "fan(OFF)"  
						 )
						 }
						println("[fan] | [State] wait | Exit point.")
					}
					 transition(edgeName="t00",targetState="turnOnFan",cond=whenRequest("fan_on"))
					transition(edgeName="t01",targetState="turnOffFan",cond=whenRequest("fan_off"))
				}	 
				state("turnOnFan") { //this:State
					action { //it:State
						println("[fan] | [State] turnOnFan | Entry point.")
						 fan_on = true  
						answer("fan_on", "fan_done", "fan_done(X)"   )  
						println("[fan] | [State] turnOnFan | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("turnOffFan") { //this:State
					action { //it:State
						println("[fan] | [State] turnOffFan | Entry point.")
						 fan_on = false  
						answer("fan_off", "fan_done", "fan_done(X)"   )  
						println("[fan] | [State] turnOffFan | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
