/* Generated by AN DISI Unibo */ 
package it.unibo.businesslogic

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Businesslogic ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val WMAX = 500
				var indoor_area_weight = 0
				var indoor_area_free = true
				var dtoccupied_watchdog_running = false
				
				val DMIN = 100
				var outdoor_area_distance = 200
				var outdoor_area_free = true
				var outdoor_alarm_on = false
				var dtfree_watchdog_running = false
				
				val TMAX = 35
				var temperature = 22
				var temperature_high = false
				
				var fan_on = false
				var fan_automatic = false
				var wait_for_fan_on = false
				var wait_for_fan_off = false
				
				var transport_trolley_stopped = false
				var transport_trolley_working = false
				
				var parking_slots = mutableListOf(1, 2, 3, 4, 5, 6)
				var parking_slots_status = arrayOf<String>("FREE", "FREE", "FREE", "FREE", "FREE", "FREE")
				var token_parking_slots = java.util.LinkedList<String>()
				var RESERVED_SLOTNUM_INDOOR_AREA = 0
				var RESERVED_SLOTNUM_CAR_PARK = 0
				var RESERVED_SLOTNUM_CAR_PICK_UP = 0
				var wait_for_client_enter_indoor_area = false
				var wait_for_client_exit_outdoor_area = false   
				var car_pickup_request = false 
				var car_park_request = false  
				
				val weightsensorObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "weightsensor")
				val outsonarObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "outsonar")
				val thermometerObserver = itunibo.qakobserver.FactoryQakObserver.create(myself, "thermometer")
				
				fun buildStatus() : String {
					
					// TODO optimize with something similar to StringBuilder...
					
					var status = "parkingareastatus("
		
					var logical_indoor_area : String
					if (indoor_area_free) logical_indoor_area = "FREE"
					else                  logical_indoor_area = "OCCUPIED"
					status += "indoor_area($indoor_area_weight,$logical_indoor_area)|"
					
					var logical_outdoor_area : String
					if (outdoor_area_free) logical_outdoor_area = "FREE"
					else                   logical_outdoor_area = "OCCUPIED"
					status += "outdoor_area($outdoor_area_distance,$logical_outdoor_area)|"
					
					var logical_temperature : String
					if (temperature_high) logical_temperature = "HIGH"
					else                  logical_temperature = "LOW"
					status += "temperature($temperature,$logical_temperature)|"
					
					var fan_status : String
					if (fan_on) fan_status = "ON"
					else        fan_status = "OFF"
					var fan_mode : String
					if (fan_automatic) fan_mode = "AUTOMATIC"
					else               fan_mode = "MANUAL"
					status += "fan($fan_mode,$fan_status)|"
					
					var transport_trolley_status : String
					if (transport_trolley_stopped)      transport_trolley_status = "STOPPED"
					else if (transport_trolley_working) transport_trolley_status = "WORKING"
					else                                transport_trolley_status = "IDLE"
					status += "transporttrolley($transport_trolley_status)|"
					
					val P1 = parking_slots_status[0]
					val P2 = parking_slots_status[1]
					val P3 = parking_slots_status[2]
					val P4 = parking_slots_status[3]
					val P5 = parking_slots_status[4]
					val P6 = parking_slots_status[5]
					status += "parkingslots($P1,$P2,$P3,$P4,$P5,$P6)|"
					
					var outdoor_alarm : String
					if (outdoor_alarm_on) outdoor_alarm = "ON"
					else                  outdoor_alarm = "OFF"
					status += "outdooralarm($outdoor_alarm)"
					
					return status + ")"
				}
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[businesslogic] | [State] init | Entry point.")
						
									weightsensorObserver.observe()
									outsonarObserver.observe()
									thermometerObserver.observe()
						println("[businesslogic] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("running") { //this:State
					action { //it:State
						println("[businesslogic] | [State] running | Entry point.")
						println("[businesslogic] | [State] running | Exit point.")
					}
					 transition(edgeName="t00",targetState="acceptIn",cond=whenRequestGuarded("parking_car_interest",{ indoor_area_free && !wait_for_client_enter_indoor_area  
					}))
					transition(edgeName="t01",targetState="carEnter",cond=whenRequestGuarded("car_enter",{ !transport_trolley_stopped && !indoor_area_free && !car_park_request  
					}))
					transition(edgeName="t02",targetState="acceptOut",cond=whenRequestGuarded("car_pickup",{ !transport_trolley_stopped && outdoor_area_free && !wait_for_client_exit_outdoor_area && !car_pickup_request   
					}))
					transition(edgeName="t03",targetState="handleTimeout",cond=whenEvent("local_timeout"))
					transition(edgeName="t04",targetState="handleManagerMsg",cond=whenDispatch("manager_fan_automatic_mode"))
					transition(edgeName="t05",targetState="handleManagerMsg",cond=whenDispatch("manager_fan_manual_mode"))
					transition(edgeName="t06",targetState="handleManagerMsg",cond=whenRequest("manager_fan_on"))
					transition(edgeName="t07",targetState="handleManagerMsg",cond=whenRequest("manager_fan_off"))
					transition(edgeName="t08",targetState="handleManagerMsg",cond=whenDispatch("manager_transport_trolley_start"))
					transition(edgeName="t09",targetState="handleManagerMsg",cond=whenDispatch("manager_transport_trolley_stop"))
					transition(edgeName="t010",targetState="handleFanReply",cond=whenReply("fan_done"))
					transition(edgeName="t011",targetState="handleFanReply",cond=whenReply("fan_fail"))
					transition(edgeName="t012",targetState="updateSensorStatus",cond=whenDispatch("update"))
				}	 
				state("handleManagerMsg") { //this:State
					action { //it:State
						println("[businesslogic] | [State] handleManagerMsg | Entry point.")
						if( checkMsgContent( Term.createTerm("manager_fan_automatic_mode(X)"), Term.createTerm("manager_fan_automatic_mode(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 fan_automatic = true  
								if(  temperature > TMAX && !fan_on  
								 ){request("fan_on", "fan_on(X)" ,"fan" )  
								 fan_on = true  
								}
								if(  temperature <= TMAX && fan_on  
								 ){request("fan_off", "fan_off(X)" ,"fan" )  
								 fan_on = false  
								}
						}
						if( checkMsgContent( Term.createTerm("manager_fan_manual_mode(X)"), Term.createTerm("manager_fan_manual_mode(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 fan_automatic = false  
						}
						if(  !fan_automatic  
						 ){if( checkMsgContent( Term.createTerm("manager_fan_on(X)"), Term.createTerm("manager_fan_on(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 wait_for_fan_on = true  
								request("fan_on", "fan_on(X)" ,"fan" )  
						}
						if( checkMsgContent( Term.createTerm("manager_fan_off(X)"), Term.createTerm("manager_fan_off(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 wait_for_fan_off = true  
								request("fan_off", "fan_off(X)" ,"fan" )  
						}
						}
						if( checkMsgContent( Term.createTerm("manager_transport_trolley_start(X)"), Term.createTerm("manager_transport_trolley_start(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 transport_trolley_stopped = false  
						}
						if( checkMsgContent( Term.createTerm("manager_transport_trolley_stop(X)"), Term.createTerm("manager_transport_trolley_stop(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 transport_trolley_stopped = true  
						}
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] handleManagerMsg | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("updateSensorStatus") { //this:State
					action { //it:State
						println("[businesslogic] | [State] updateSensorStatus | Entry point.")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("update(SENSOR_STATUS)"), Term.createTerm("update(SENSOR_STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val msg = payloadArg(0)  
								if(  msg.contains("weightsensor")  
								 ){ indoor_area_weight = msg.substringAfter("(").substringBefore(")").toInt()  
								if(  indoor_area_weight > WMAX  
								 ){ wait_for_client_enter_indoor_area = false  
								 indoor_area_free = false  
								if(  dtoccupied_watchdog_running  
								 ){forward("stop_watchdog", "stop_watchdog(X)" ,"dtoccupiedwatchdog" ) 
								 dtoccupied_watchdog_running = false  
								}
								}
								else
								 { indoor_area_free = true  
								 }
								}
								if(  msg.contains("outsonar")  
								 ){ outdoor_area_distance = msg.substringAfter("(").substringBefore(")").toInt()  
								if(  outdoor_area_distance < DMIN  
								 ){ outdoor_area_free = false  
								}
								else
								 { wait_for_client_exit_outdoor_area = false  
								  outdoor_area_free = true  
								 if(  dtfree_watchdog_running  
								  ){forward("stop_watchdog", "stop_watchdog(X)" ,"dtfreewatchdog" ) 
								  dtfree_watchdog_running = false  
								 }
								 if(  outdoor_alarm_on  
								  ){ outdoor_alarm_on = false  
								 }
								 }
								}
								if(  msg.contains("thermometer")  
								 ){ temperature = msg.substringAfter("(").substringBefore(")").toInt()  
								if(  temperature > TMAX  
								 ){ temperature_high = true  
								if(  fan_automatic && !fan_on  
								 ){ wait_for_fan_on = true  
								request("fan_on", "fan_on(X)" ,"fan" )  
								}
								}
								else
								 { temperature_high = false  
								 if(  fan_automatic && fan_on  
								  ){ wait_for_fan_off = true  
								 request("fan_off", "fan_off(X)" ,"fan" )  
								 }
								 }
								}
						}
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] updateSensorStatus | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("handleFanReply") { //this:State
					action { //it:State
						println("[businesslogic] | [State] handleFanReply | Entry point.")
						if( checkMsgContent( Term.createTerm("fan_done(X)"), Term.createTerm("fan_done(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  wait_for_fan_on  
								 ){ wait_for_fan_on = false  
								 fan_on = true  
								if(  !fan_automatic  
								 ){answer("manager_fan_on", "fan_done", "fan_done(X)"   )  
								}
								}
								if(  wait_for_fan_off  
								 ){ wait_for_fan_off = false  
								 fan_on = false  
								if(  !fan_automatic  
								 ){answer("manager_fan_off", "fan_done", "fan_done(X)"   )  
								}
								}
						}
						if( checkMsgContent( Term.createTerm("fan_fail(REASON)"), Term.createTerm("fan_fail(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val REASON = payloadArg(0)  
								println("[businesslogic] | [State] handleFanReply | Fan fail, REASON: $REASON.")
								if(  wait_for_fan_on  
								 ){ wait_for_fan_on = false  
								if(  !fan_automatic  
								 ){answer("manager_fan_on", "fan_fail", "fan_fail($REASON)"   )  
								}
								}
								if(  wait_for_fan_off  
								 ){ wait_for_fan_off = false  
								if(  !fan_automatic  
								 ){answer("manager_fan_off", "fan_fail", "fan_fail($REASON)"   )  
								}
								}
						}
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] handleFanReply | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("handleTimeout") { //this:State
					action { //it:State
						println("[businesslogic] | [State] handleTimeout | Entry point.")
						if( checkMsgContent( Term.createTerm("local_timeout(X)"), Term.createTerm("local_timeout(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  currentMsg.msgSender().equals("dtoccupiedwatchdog")  
								 ){ dtoccupied_watchdog_running = false  
								 wait_for_client_enter_indoor_area = false  
								 RESERVED_SLOTNUM_INDOOR_AREA = 0  
								}
								if(  currentMsg.msgSender().equals("dtfreewatchdog")  
								 ){ dtfree_watchdog_running = false  
								 outdoor_alarm_on = true  
								updateResourceRep( buildStatus()  
								)
								}
						}
						println("[businesslogic] | [State] handleTimeout | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("acceptIn") { //this:State
					action { //it:State
						println("[businesslogic] | [State] acceptIn | Entry point.")
						if(  parking_slots.isEmpty()  
						 ){println("[businesslogic] | [State] acceptIn | Sending failure to client.. ")
						answer("parking_car_interest", "inform_in", "inform_in(0)"   )  
						}
						else
						 { 
						 			RESERVED_SLOTNUM_INDOOR_AREA = parking_slots.removeFirst()
						 			wait_for_client_enter_indoor_area = true
						 println("[businesslogic] | [State] acceptIn | Let the car enter in the indoor area. I'm sending SLOTNUM.")
						 answer("parking_car_interest", "inform_in", "inform_in($RESERVED_SLOTNUM_INDOOR_AREA)"   )  
						 forward("start_watchdog", "start_watchdog(X)" ,"dtoccupiedwatchdog" ) 
						  dtoccupied_watchdog_running = true  
						 }
						println("[businesslogic] | [State] acceptIn | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("carEnter") { //this:State
					action { //it:State
						println("[businesslogic] | [State] carEnter | Entry point.")
						if( checkMsgContent( Term.createTerm("car_enter(SLOTNUM)"), Term.createTerm("car_enter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val client_SLOTNUM = payloadArg(0).toInt()
								println("[businesslogic] | [State] carEnter | Received SLOTNUM=$client_SLOTNUM")
								if(  client_SLOTNUM == RESERVED_SLOTNUM_INDOOR_AREA && RESERVED_SLOTNUM_INDOOR_AREA != 0  
								 ){
													RESERVED_SLOTNUM_CAR_PARK = RESERVED_SLOTNUM_INDOOR_AREA
													RESERVED_SLOTNUM_INDOOR_AREA = 0
													car_park_request = true	
								}
								else
								 {println("[businesslogic] | [State] carEnter | Invalid car enter request: SLOTNUM is wrong.")
								 answer("car_enter", "response_car_enter", "response_car_enter(INVALID)"   )  
								 }
						}
						println("[businesslogic] | [State] carEnter | Exit point.")
					}
					 transition( edgeName="goto",targetState="doCarPark", cond=doswitchGuarded({ car_park_request  
					}) )
					transition( edgeName="goto",targetState="running", cond=doswitchGuarded({! ( car_park_request  
					) }) )
				}	 
				state("doCarPark") { //this:State
					action { //it:State
						println("[businesslogic] | [State] doCarPark | Entry point.")
						 transport_trolley_working = true  
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] doCarPark | TransportTrolley is going to INDOOR...")
						delay(2000) 
						println("[businesslogic] | [State] doCarPark | TransportTrolley at INDOOR!")
						
									// simplified! need to change in random generation
									val TOKENID = "PMSx$RESERVED_SLOTNUM_CAR_PARK" 
									token_parking_slots.add(TOKENID)
						println("[businesslogic] | [State] doCarPark | Send TOKENID=$TOKENID to client...")
						answer("car_enter", "response_car_enter", "response_car_enter($TOKENID)"   )  
						println("[businesslogic] | [State] doCarPark | TransportTrolley is taking over the car...")
						delay(1000) 
						println("[businesslogic] | [State] doCarPark | TransportTrolley is going to SLOTNUM n. $RESERVED_SLOTNUM_CAR_PARK...")
						delay(2000) 
						println("[businesslogic] | [State] doCarPark | TransportTrolley at SLOTNUM n. $RESERVED_SLOTNUM_CAR_PARK!")
						println("[businesslogic] | [State] doCarPark | TransportTrolley is releasing the car...")
						delay(1000) 
						 
									car_park_request = false 
									parking_slots_status[RESERVED_SLOTNUM_CAR_PARK - 1] = "OCCUPIED"
									RESERVED_SLOTNUM_CAR_PARK = 0
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] doCarPark | Exit point.")
					}
					 transition( edgeName="goto",targetState="transportTrolleyBackToHome", cond=doswitch() )
				}	 
				state("transportTrolleyBackToHome") { //this:State
					action { //it:State
						println("[businesslogic] | [State] transportTrolleyBackToHome | Entry point.")
						println("[businesslogic] | [State] transportTrolleyBackToHome | TransportTrolley is going to HOME...")
						delay(2000) 
						println("[businesslogic] | [State] transportTrolleyBackToHome | TransportTrolley at HOME!")
						 transport_trolley_working = false  
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] transportTrolleyBackToHome | Exit point.")
					}
					 transition( edgeName="goto",targetState="running", cond=doswitch() )
				}	 
				state("acceptOut") { //this:State
					action { //it:State
						println("[businesslogic] | [State] checkTokenId | Entry point.")
						println("[businesslogic] | [State] checkTokenId | Checking the TokenID...")
						if( checkMsgContent( Term.createTerm("car_pickup(TOKENID)"), Term.createTerm("car_pickup(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											var tokenid_valid = false
											val TOKENID = payloadArg(0).toString() 
											val token_index = token_parking_slots.indexOf(TOKENID)
								if(  token_index >= 0  
								 ){ 
												token_parking_slots.removeAt(token_index)
												for (c in TOKENID) {  
								if(  c.isDigit()  
								 ){ 
														tokenid_valid = true
														RESERVED_SLOTNUM_CAR_PICK_UP = Character.getNumericValue(c)
														car_pickup_request = true
														
														break
								}
								 }  
								}
								if(  !tokenid_valid  
								 ){println("[businesslogic] | [State] invalidTokenId | TOKENID=$TOKENID is invalid. Can't pick up the car.")
								answer("car_pickup", "accept_out_failure", "accept_out_failure(X)"   )  
								}
						}
						println("[businesslogic] | [State] checkTokenId | Exit point.")
					}
					 transition( edgeName="goto",targetState="doCarPickUp", cond=doswitchGuarded({ car_pickup_request  
					}) )
					transition( edgeName="goto",targetState="running", cond=doswitchGuarded({! ( car_pickup_request  
					) }) )
				}	 
				state("doCarPickUp") { //this:State
					action { //it:State
						println("[businesslogic] | [State] doCarPickUp | Entry point.")
						 transport_trolley_working = true  
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] doCarPickUp | TransportTrolley is going to SLOTNUM n. $RESERVED_SLOTNUM_CAR_PICK_UP...")
						delay(2000) 
						println("[businesslogic] | [State] doCarPickUp | TransportTrolley at SLOTNUM n. $RESERVED_SLOTNUM_CAR_PICK_UP!")
						println("[businesslogic] | [State] doCarPickUp | TransportTrolley is taking over the car...")
						delay(1000) 
						println("[businesslogic] | [State] doCarPickUp | TransportTrolley is going to OUTDOOR...")
						delay(2000) 
						println("[businesslogic] | [State] doCarPickUp | TransportTrolley at OUTDOOR!")
						println("[businesslogic] | [State] doCarPickUp | TransportTrolley is releasing the car...")
						delay(1000) 
						println("[businesslogic] | [State] doCarPickUp | Set free the parking slot n. $RESERVED_SLOTNUM_CAR_PICK_UP")
						 
									parking_slots.add(RESERVED_SLOTNUM_CAR_PICK_UP) 
									wait_for_client_exit_outdoor_area = true
									car_pickup_request = false
									parking_slots_status[RESERVED_SLOTNUM_CAR_PICK_UP - 1] = "FREE"
									RESERVED_SLOTNUM_CAR_PICK_UP = 0
						println("[businesslogic] | [State] doCarPickUp | Telling the client to go away...")
						answer("car_pickup", "accept_out_success", "accept_out_success(X)"   )  
						forward("start_watchdog", "start_watchdog(X)" ,"dtfreewatchdog" ) 
						 dtfree_watchdog_running = true  
						updateResourceRep( buildStatus()  
						)
						println("[businesslogic] | [State] doCarPickUp | Exit point.")
					}
					 transition( edgeName="goto",targetState="transportTrolleyBackToHome", cond=doswitch() )
				}	 
			}
		}
}
