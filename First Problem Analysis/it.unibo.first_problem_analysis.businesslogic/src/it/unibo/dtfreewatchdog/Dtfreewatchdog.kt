/* Generated by AN DISI Unibo */ 
package it.unibo.dtfreewatchdog

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Dtfreewatchdog ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("[dtfreewatchdog] | [State] init | Entry point.")
						println("[dtfreewatchdog] | [State] init | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("[dtfreewatchdog] | [State] wait | Entry point.")
						println("[dtfreewatchdog] | [State] wait | Exit point.")
					}
					 transition(edgeName="t017",targetState="running",cond=whenDispatch("start_watchdog"))
					transition(edgeName="t018",targetState="wait",cond=whenDispatch("stop_watchdog"))
				}	 
				state("running") { //this:State
					action { //it:State
						println("[dtfreewatchdog] | [State] running | Entry point.")
						println("[dtfreewatchdog] | [State] running | Exit point.")
						stateTimer = TimerActor("timer_running", 
							scope, context!!, "local_tout_dtfreewatchdog_running", 60000.toLong() )
					}
					 transition(edgeName="t019",targetState="emitTimeout",cond=whenTimeout("local_tout_dtfreewatchdog_running"))   
					transition(edgeName="t020",targetState="wait",cond=whenDispatch("stop_watchdog"))
				}	 
				state("emitTimeout") { //this:State
					action { //it:State
						println("[dtfreewatchdog] | [State] emitTimeout | Entry point.")
						emit("local_timeout", "local_timeout(X)" ) 
						println("[dtfreewatchdog] | [State] emitTimeout | Exit point.")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
